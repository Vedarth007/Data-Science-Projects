# -*- coding: utf-8 -*-
"""Movie_Recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nvQFzmjnil2XW9Bf3v_iWv6RdbUqhFlz
"""

import pandas as pd
import numpy as np

movies = pd.read_csv('/dataset.csv')

movies.head()

movies.columns

movies.info()

movies['tags']=movies['genre']+movies['overview']

movies.head()

movies= movies.drop(columns=['genre','overview'])

movies.head()

from sklearn.feature_extraction.text import CountVectorizer

cv= CountVectorizer(max_features=10000, stop_words='english')

cv

vec=cv.fit_transform(movies['tags'].values.astype('U')).toarray()

vec

vec.shape

from sklearn.metrics.pairwise import cosine_similarity

sim=cosine_similarity(vec)

sim

movies[movies['title']=='The Shawshank Redemption']

dist=sorted(list(enumerate(sim[0])),reverse=True,key= lambda vec:vec[1])

dist

for i in dist[0:5]:
  print(movies.iloc[i[0]].title)

def recommend(movie_title):
    index = movies[movies['title'] == movie_title].index[0]
    distance = sorted(list(enumerate(sim[index])), reverse=True, key=lambda vec: vec[1])
    for i in distance[1:6]:  # Exclude the first entry since it will be the movie itself
        print(movies.iloc[i[0]].title)

recommend("Iron Man")

from sklearn.metrics.pairwise import cosine_similarity

combined_features = np.concatenate((vec, movies['vote_average'].values.reshape(-1, 1)), axis=1)

sim_combined = cosine_similarity(combined_features)

def recommend2(movie_title):
    index = movies[movies['title'] == movie_title].index[0]
    distance = sorted(list(enumerate(sim_combined[index])), reverse=True, key=lambda vec: vec[1])
    for i in distance[1:6]:  # Exclude the first entry since it will be the movie itself
        print(movies.iloc[i[0]].title)

recommend2("Nati stanchi")

